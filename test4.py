import numpy as np
from PIL import Image

def mls_affine_deformation(vy, vx, p, q, alpha = 1.0, eps = 1e-8):
    
    """
    Affine Transformation
    
    Pararmeter
    --------------------
    vy, vx : ndarray
        coordinate grid, generated by np.meshgrid(gridX, gridY)
    p : ndarray
        original control points in (y, x) formats
    q : ndarray
        final control points in (y, x) formats
    alpha : float
        parameter used by weights
    eps : float
        epsilon
        
    
    Return
    -------------------
        Deformed image
    
    """

    q = np.ascontiguousarray(q.astype(np.int16))
    p = np.ascontiguousarray(p.astype(np.int16))
    
    #due to current algorithm; exchange p and q hence we transform destination pixels to the corresponding source pixels
    p, q = q, p
    
    grow = vx.shape[0]
    gcol = vx.shape[1]
    ctrls = p.shape[0]
    
    reshaped_p = p.reshape(ctrls, 2, 1, 1)      #[ctrls, 2, 1, 1]
    reshaped_v = np.vstack((vx.reshape(1, grow, gcol), vy.reshape(1, grow, gcol)))      #[2, grow, gcol]
    
    w = 1.0 / (np.sum((reshaped_p - reshaped_v).astype(np.float32) ** 2, axis = 1) + eps) ** alpha
    w /= np.sum(w, axis = 0, keepdims = True)           #[ctrls, grow, gcol]
    
    pstar = np.zeros((2, grow, gcol), np.float32)
    for i in range(ctrls):
        pstar += w[i] * reshaped_p[i]
    
    phat = reshaped_p - pstar
    phat = phat.reshape(ctrls, 2, 1, grow, gcol)
    phat1 = phat.reshape(ctrls, 1, 2, grow, gcol)
    reshaped_w = w.reshape(ctrls, 1, 1, grow, gcol)
    pTwp = np.zeros((2, 2, grow, gcol), np.float32)

    for i in range(ctrls):
        pTwp += phat[i] * reshaped_w[i] * phat1[i]
    del phat
    
    try:
        inv_pTwp = np.linalg.inv(pTwp.transpose(2, 3, 0, 1))
        flag = False
    except np.linalg.linalg.LinAlgError:
        flag = True
        det = np.linalg.det(pTwp.transpose(2, 3, 0, 1))
        det[det < 1e-8] = np.inf
        
    
    return reshaped_v


def main():
    #define control points for original, deformed image
    p = np.array([
        [155, 30], [155, 125], [155, 225],
        [235, 100], [235, 160], [295, 85], [293, 180]
    ])

    q = np.array([
        [211, 42], [155, 125], [100, 235],
        [235, 80], [235, 140], [295, 85], [295, 180]
    ])
    
    print(p.shape)
    
    image = np.array(Image.open('/opencv/opencv/samples/data/lena.jpg'))

    height, width, _ = image.shape
    #create grid coordinate
    gridX = np.arange(width, dtype = np.int16)
    gridY = np.arange(height, dtype = np.int16)
    vy, vx = np.meshgrid(gridX, gridY)
    
    result = mls_affine_deformation(vy, vx, p, q)
    print(result)
    
if __name__ == "__main__":
    main()